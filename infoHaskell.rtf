{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoascreenfonts1\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fmodern\fcharset0 Courier;\f2\fnil\fcharset0 Monaco;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\csgray\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Here is a guide to installing, compiling, and running our Haskell code, followed by some information resources we used.  But we start off with information about the main file main.hs\
\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
Basic information about our main.hs:\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\
To switch between between in vivo and in vitro program, all you need to do is add and remove comments in the file main.hs.  If you want to run the in vivo program, make sure that in the main.hs the in vivo lines are uncommented as\
\
import InVivo\
main = do inVivo\
\
and the in vitro lines \'93import InVitro\'94 and \'93main = do inVitro\'94 are commented out using double dashes at the beginning of those lines:\
\
If you want to run the in vitro program, make sure the in vitro line are similarly uncommented and the in vivo lines are commented out.\
\
\
\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
INSTALLING HASKELL\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
 \
- follow the directions for using GHCup on https://www.haskell.org/downloads/ by typing on the command line (omitting $ signs):\
$ 
\f1\fs26 \expnd0\expndtw0\kerning0
curl --proto '=https' --tlsv1.2 -sSf https://get-ghcup.haskell.org | sh
\f0\fs24 \kerning1\expnd0\expndtw0 \
$ 
\f1 \cf2 \expnd0\expndtw0\kerning0
curl -sSL https://get.haskellstack.org/ | sh\

\f0 \cf0 \kerning1\expnd0\expndtw0 \
- install System.Random using\
$ 
\f2\fs20 \cf3 \CocoaLigature0 stack install random
\f0\fs24 \cf0 \CocoaLigature1 \
\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
COMPILING\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\
COMPILING USING STACK\
\
Recommended command:\
\
$ 
\f2\fs20 \cf3 \CocoaLigature0 stack ghc -- -O2 -XBangPatterns main.hs
\f0\fs24 \cf0 \CocoaLigature1 \
\
(where -O2 is capital letter 'O'  followed by number 2)\
\
should output: \
file_name	file_name.o	file_name.hi\
\
\
COMPILING WITHOUT STACK (we did this prior to 2020)\
\
$ ghc -O2 -XBangPatterns file_name.hs\
\
\
To allow for run time statistics (RTS)\
\
$ ghc filename.hs -rtsopts\
\
\
compiling into C code:\
\
$  ghc -C file_name.hs\
\
should output:\
file_name.hc\
\
\
full optimization and profiling:\
\pard\pardeftab720\partightenfactor0

\f1 \cf0 \expnd0\expndtw0\kerning0
ghc -O2 -XBangPatterns -prof -fprof-auto -rtsopts Main.hs
\f0 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
RUNNING CODE\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\
\
$ ./file_name\
\
\
In order to measure time it takes to run:\
\
$ time ./file_name\
\
\
Using run-time-statistics (RTS) (must compile with -rtsopts first)\
\
$ ./file_name +RTS  -sstderr\
\
\
\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
RESOURCES AND INFORMATION ABOUT HASKELL:\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\
https://www.haskell.org/\
http://learnyouahaskell.com/\
http://book.realworldhaskell.org/read/\
\
performance:\
http://www.haskell.org/haskellwiki/Performance\
http://www.haskell.org/haskellwiki/How_to_profile_a_Haskell_program\
\
continuations:\
http://users.aber.ac.uk/afc/stricthaskell.html\
\
About Data.Sequence:\
http://book.realworldhaskell.org/read/data-structures.html\
http://hackage.haskell.org/package/containers-0.2.0.1/docs/Data-Sequence.html\
\
maybe useful for performance and comparing with other data types:\
http://stackoverflow.com/questions/9611904/haskell-lists-arrays-vectors-sequences\
http://www.haskell.org/haskellwiki/Arrays\
\
}